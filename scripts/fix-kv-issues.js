#!/usr/bin/env node

/**
 * Script para diagnosticar e corrigir problemas com Vercel KV
 * Execute: node scripts/fix-kv-issues.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Script de Corre√ß√£o do Vercel KV\n');

// Verificar se estamos no diret√≥rio correto
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error('‚ùå Execute este script na raiz do projeto (onde est√° o package.json)');
  process.exit(1);
}

// Verificar arquivo .env.local
const envLocalPath = path.join(process.cwd(), '.env.local');
console.log('üìã 1. Verificando arquivo .env.local...');

if (!fs.existsSync(envLocalPath)) {
  console.log('‚ùå Arquivo .env.local n√£o encontrado');
  console.log('üí° Criando arquivo .env.local baseado no .env.example...');
  
  const envExamplePath = path.join(process.cwd(), '.env.example');
  if (fs.existsSync(envExamplePath)) {
    fs.copyFileSync(envExamplePath, envLocalPath);
    console.log('‚úÖ Arquivo .env.local criado');
  } else {
    console.log('‚ö†Ô∏è .env.example n√£o encontrado, criando .env.local b√°sico...');
    const basicEnv = `# Vercel KV Configuration
KV_REST_API_URL=
KV_REST_API_TOKEN=
KV_URL=

# Environment
NODE_ENV=development
`;
    fs.writeFileSync(envLocalPath, basicEnv);
    console.log('‚úÖ Arquivo .env.local b√°sico criado');
  }
} else {
  console.log('‚úÖ Arquivo .env.local encontrado');
}

// Ler e verificar vari√°veis do .env.local
console.log('\nüìã 2. Verificando vari√°veis de ambiente...');
const envContent = fs.readFileSync(envLocalPath, 'utf8');
const envLines = envContent.split('\n');

const envVars = {};
envLines.forEach(line => {
  const trimmed = line.trim();
  if (trimmed && !trimmed.startsWith('#')) {
    const [key, ...valueParts] = trimmed.split('=');
    if (key) {
      envVars[key] = valueParts.join('=');
    }
  }
});

// Verificar vari√°veis KV espec√≠ficas
const kvVars = {
  'KV_REST_API_URL': envVars.KV_REST_API_URL,
  'KV_REST_API_TOKEN': envVars.KV_REST_API_TOKEN,
  'KV_URL': envVars.KV_URL
};

console.log('Vari√°veis KV encontradas:');
Object.entries(kvVars).forEach(([key, value]) => {
  const status = value && value.trim() ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA';
  const displayValue = value && value.trim() ? 
    (value.length > 20 ? value.substring(0, 20) + '...' : value) : 
    'VAZIA';
  console.log(`  ${key}: ${status} (${displayValue})`);
});

// Verificar se pelo menos uma configura√ß√£o est√° completa
const hasValidConfig = (kvVars.KV_REST_API_URL || kvVars.KV_URL) && kvVars.KV_REST_API_TOKEN;

if (!hasValidConfig) {
  console.log('\n‚ùå Configura√ß√£o KV incompleta!');
  console.log('\nüí° Para corrigir:');
  console.log('1. Acesse o painel do Vercel: https://vercel.com/dashboard');
  console.log('2. V√° para seu projeto: https://vercel.com/baiacuplays-projects/projeto-bandle');
  console.log('3. Clique em "Storage" > "KV"');
  console.log('4. Copie as vari√°veis de ambiente para o arquivo .env.local');
  console.log('5. Ou execute o deploy no Vercel para que as vari√°veis sejam definidas automaticamente');
  
  console.log('\nüìù Exemplo de configura√ß√£o no .env.local:');
  console.log('KV_REST_API_URL=https://concise-spaniel-34484.upstash.io');
  console.log('KV_REST_API_TOKEN=AYa0AAIjcDE...');
  console.log('KV_URL=rediss://default:AYa0AAIjcDE...@concise-spaniel-34484.upstash.io:6379');
} else {
  console.log('\n‚úÖ Configura√ß√£o KV parece v√°lida');
}

// Verificar depend√™ncias
console.log('\nüìã 3. Verificando depend√™ncias...');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

const requiredDeps = ['@vercel/kv'];
const missingDeps = requiredDeps.filter(dep => !dependencies[dep]);

if (missingDeps.length > 0) {
  console.log('‚ùå Depend√™ncias faltando:', missingDeps.join(', '));
  console.log('üí° Execute: npm install @vercel/kv');
} else {
  console.log('‚úÖ Todas as depend√™ncias necess√°rias est√£o instaladas');
}

// Verificar arquivos de configura√ß√£o
console.log('\nüìã 4. Verificando arquivos de configura√ß√£o...');

const configFiles = [
  'utils/kv-config.js',
  'utils/kv-fix.js',
  'pages/api/debug-kv.js'
];

configFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} encontrado`);
  } else {
    console.log(`‚ùå ${file} n√£o encontrado`);
  }
});

// Gerar relat√≥rio final
console.log('\nüìä RELAT√ìRIO FINAL:');
console.log('==================');

if (hasValidConfig) {
  console.log('‚úÖ Configura√ß√£o KV: V√ÅLIDA');
  console.log('üí° Se ainda h√° problemas:');
  console.log('   1. Reinicie o servidor de desenvolvimento (npm run dev)');
  console.log('   2. Acesse /debug-kv para diagn√≥stico detalhado');
  console.log('   3. Verifique se as vari√°veis est√£o definidas no Vercel tamb√©m');
} else {
  console.log('‚ùå Configura√ß√£o KV: INV√ÅLIDA');
  console.log('üîß A√ß√µes necess√°rias:');
  console.log('   1. Configurar vari√°veis KV no .env.local');
  console.log('   2. Ou fazer deploy no Vercel para configura√ß√£o autom√°tica');
  console.log('   3. Reiniciar o servidor ap√≥s configurar');
}

console.log('\nüîó Links √∫teis:');
console.log('   - Painel Vercel: https://vercel.com/baiacuplays-projects/projeto-bandle');
console.log('   - Debug local: http://localhost:3000/debug-kv');
console.log('   - Documenta√ß√£o KV: https://vercel.com/docs/storage/vercel-kv');

console.log('\n‚ú® Script conclu√≠do!');

// Se estivermos em ambiente de desenvolvimento, tentar carregar as vari√°veis
if (process.env.NODE_ENV !== 'production') {
  console.log('\nüß™ Testando carregamento das vari√°veis...');
  
  // Carregar vari√°veis do .env.local
  require('dotenv').config({ path: envLocalPath });
  
  const testVars = {
    KV_REST_API_URL: process.env.KV_REST_API_URL,
    KV_REST_API_TOKEN: process.env.KV_REST_API_TOKEN,
    KV_URL: process.env.KV_URL
  };
  
  console.log('Vari√°veis carregadas no processo:');
  Object.entries(testVars).forEach(([key, value]) => {
    const status = value ? '‚úÖ CARREGADA' : '‚ùå N√ÉO CARREGADA';
    console.log(`  ${key}: ${status}`);
  });
  
  const processHasValidConfig = (testVars.KV_REST_API_URL || testVars.KV_URL) && testVars.KV_REST_API_TOKEN;
  
  if (processHasValidConfig) {
    console.log('‚úÖ Vari√°veis carregadas com sucesso no processo Node.js');
  } else {
    console.log('‚ùå Vari√°veis n√£o foram carregadas corretamente');
    console.log('üí° Certifique-se de reiniciar o servidor ap√≥s editar o .env.local');
  }
}
