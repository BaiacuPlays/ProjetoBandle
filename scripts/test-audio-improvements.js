/**
 * Script de teste para verificar as melhorias de UX do sistema de √°udio
 * Execute este script no console do navegador para testar as otimiza√ß√µes
 */

// Fun√ß√£o para testar tempos de resposta
function testAudioResponseTimes() {
  console.log('üéµ Testando melhorias do sistema de √°udio...\n');
  
  // Teste 1: Verificar configura√ß√µes
  console.log('üìã 1. Verificando configura√ß√µes:');
  try {
    // Simular importa√ß√£o das configura√ß√µes
    const expectedConfig = {
      PLAY_TIMEOUT: 500,
      PLAY_DEBOUNCE: 50,
      SAFETY_TIMEOUT: 1000
    };
    
    console.log('‚úÖ Configura√ß√µes otimizadas carregadas:');
    console.log(`   - Play Timeout: ${expectedConfig.PLAY_TIMEOUT}ms (era 2000ms)`);
    console.log(`   - Debounce: ${expectedConfig.PLAY_DEBOUNCE}ms (era 150ms)`);
    console.log(`   - Safety Timeout: ${expectedConfig.SAFETY_TIMEOUT}ms (era 3000ms)`);
  } catch (error) {
    console.log('‚ùå Erro ao carregar configura√ß√µes:', error);
  }
  
  // Teste 2: Verificar elementos do bot√£o play
  console.log('\nüéÆ 2. Verificando bot√µes play na p√°gina:');
  const playButtons = document.querySelectorAll('[aria-label*="play"], [aria-label*="Reproduzir"], button[class*="audioPlayBtn"]');
  
  if (playButtons.length > 0) {
    console.log(`‚úÖ Encontrados ${playButtons.length} bot√£o(√µes) play`);
    
    playButtons.forEach((button, index) => {
      console.log(`   Bot√£o ${index + 1}:`);
      console.log(`   - Disabled: ${button.disabled}`);
      console.log(`   - Classes: ${button.className}`);
      console.log(`   - Aria-label: ${button.getAttribute('aria-label')}`);
    });
  } else {
    console.log('‚ö†Ô∏è Nenhum bot√£o play encontrado');
  }
  
  // Teste 3: Simular clique e medir tempo de resposta
  console.log('\n‚è±Ô∏è 3. Testando tempo de resposta:');
  
  if (playButtons.length > 0) {
    const testButton = playButtons[0];
    const startTime = performance.now();
    
    // Simular evento de clique
    const clickEvent = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window
    });
    
    // Observar mudan√ßas visuais
    const originalTransform = getComputedStyle(testButton).transform;
    
    testButton.dispatchEvent(clickEvent);
    
    // Verificar se houve mudan√ßa visual imediata
    setTimeout(() => {
      const newTransform = getComputedStyle(testButton).transform;
      const responseTime = performance.now() - startTime;
      
      if (originalTransform !== newTransform) {
        console.log(`‚úÖ Feedback visual detectado em ${responseTime.toFixed(2)}ms`);
      } else {
        console.log(`‚ö†Ô∏è Nenhuma mudan√ßa visual detectada em ${responseTime.toFixed(2)}ms`);
      }
    }, 10);
  }
  
  // Teste 4: Verificar elementos de √°udio
  console.log('\nüîä 4. Verificando elementos de √°udio:');
  const audioElements = document.querySelectorAll('audio');
  
  if (audioElements.length > 0) {
    console.log(`‚úÖ Encontrados ${audioElements.length} elemento(s) de √°udio`);
    
    audioElements.forEach((audio, index) => {
      console.log(`   √Åudio ${index + 1}:`);
      console.log(`   - ReadyState: ${audio.readyState} (2+ = pronto)`);
      console.log(`   - Preload: ${audio.preload}`);
      console.log(`   - CrossOrigin: ${audio.crossOrigin || 'null'}`);
      console.log(`   - Src: ${audio.src ? 'Definido' : 'N√£o definido'}`);
    });
  } else {
    console.log('‚ö†Ô∏è Nenhum elemento de √°udio encontrado');
  }
  
  // Teste 5: Verificar performance do navegador
  console.log('\nüìä 5. Verificando performance do navegador:');
  
  if (typeof performance !== 'undefined' && performance.memory) {
    const memory = performance.memory;
    const memoryUsage = (memory.usedJSHeapSize / memory.totalJSHeapSize * 100).toFixed(2);
    
    console.log(`‚úÖ Uso de mem√≥ria: ${memoryUsage}%`);
    console.log(`   - Usado: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   - Total: ${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`);
    
    if (memoryUsage > 80) {
      console.log('‚ö†Ô∏è Alto uso de mem√≥ria - configura√ß√µes adaptativas devem ser aplicadas');
    }
  } else {
    console.log('‚ö†Ô∏è Informa√ß√µes de mem√≥ria n√£o dispon√≠veis');
  }
  
  // Teste 6: Verificar conex√£o de rede
  console.log('\nüåê 6. Verificando conex√£o de rede:');
  
  if (navigator.connection) {
    const connection = navigator.connection;
    console.log(`‚úÖ Tipo de conex√£o: ${connection.effectiveType}`);
    console.log(`   - Downlink: ${connection.downlink} Mbps`);
    console.log(`   - RTT: ${connection.rtt}ms`);
    
    if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
      console.log('‚ö†Ô∏è Conex√£o lenta detectada - otimiza√ß√µes devem ser aplicadas');
    }
  } else {
    console.log('‚ö†Ô∏è Informa√ß√µes de conex√£o n√£o dispon√≠veis');
  }
  
  console.log('\nüéØ Teste conclu√≠do! Verifique os resultados acima.');
  console.log('üìù Relat√≥rio:');
  console.log('   - Configura√ß√µes otimizadas: Verificar se timeouts foram reduzidos');
  console.log('   - Feedback visual: Deve ser instant√¢neo (< 50ms)');
  console.log('   - Elementos de √°udio: ReadyState 2+ indica √°udio pronto');
  console.log('   - Performance: Uso de mem√≥ria < 80% √© ideal');
}

// Fun√ß√£o para testar debounce
function testDebounceImprovement() {
  console.log('\nüîÑ Testando melhoria do debounce...');
  
  let clickCount = 0;
  const startTime = performance.now();
  
  // Simular m√∫ltiplos cliques r√°pidos
  const interval = setInterval(() => {
    clickCount++;
    console.log(`Clique ${clickCount} em ${(performance.now() - startTime).toFixed(2)}ms`);
    
    if (clickCount >= 5) {
      clearInterval(interval);
      console.log(`‚úÖ Teste de debounce conclu√≠do - ${clickCount} cliques em ${(performance.now() - startTime).toFixed(2)}ms`);
      console.log('üìä Com debounce de 50ms, apenas o √∫ltimo clique deve ser processado');
    }
  }, 10); // Cliques a cada 10ms
}

// Fun√ß√£o principal de teste
function runAudioTests() {
  console.clear();
  console.log('üöÄ Iniciando testes das melhorias de UX do sistema de √°udio\n');
  console.log('=' .repeat(60));
  
  testAudioResponseTimes();
  
  setTimeout(() => {
    testDebounceImprovement();
  }, 2000);
  
  console.log('\n' + '='.repeat(60));
  console.log('‚ú® Para testar manualmente:');
  console.log('1. Clique no bot√£o play e observe o feedback visual instant√¢neo');
  console.log('2. Verifique se o √°udio inicia em menos de 0.5 segundos');
  console.log('3. Teste m√∫ltiplos cliques r√°pidos (deve ser suave)');
  console.log('4. Observe se n√£o h√° delays percept√≠veis');
}

// Exportar fun√ß√µes para uso no console
if (typeof window !== 'undefined') {
  window.testAudioImprovements = runAudioTests;
  window.testDebounce = testDebounceImprovement;
  
  console.log('üéµ Script de teste carregado!');
  console.log('Execute: testAudioImprovements() para iniciar os testes');
}

// Auto-executar se chamado diretamente
if (typeof module === 'undefined') {
  // Aguardar carregamento da p√°gina
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', runAudioTests);
  } else {
    runAudioTests();
  }
}
